# coding: utf-8

"""
    Resources and endpoints

    When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sign_well_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sign_well_python_sdk.api_response import AsyncGeneratorResponse
from sign_well_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sign_well_python_sdk import schemas  # noqa: F401

from sign_well_python_sdk.model.bulk_send_validate_csv401_response import BulkSendValidateCsv401Response as BulkSendValidateCsv401ResponseSchema
from sign_well_python_sdk.model.bulk_send_validate_csv422_response import BulkSendValidateCsv422Response as BulkSendValidateCsv422ResponseSchema
from sign_well_python_sdk.model.bulk_send_template_ids_param_map import BulkSendTemplateIdsParamMap as BulkSendTemplateIdsParamMapSchema
from sign_well_python_sdk.model.bulk_send_validate_csv_response import BulkSendValidateCsvResponse as BulkSendValidateCsvResponseSchema
from sign_well_python_sdk.model.bulk_send_csv_request import BulkSendCsvRequest as BulkSendCsvRequestSchema

from sign_well_python_sdk.type.bulk_send_validate_csv401_response import BulkSendValidateCsv401Response
from sign_well_python_sdk.type.bulk_send_csv_request import BulkSendCsvRequest
from sign_well_python_sdk.type.bulk_send_validate_csv_response import BulkSendValidateCsvResponse
from sign_well_python_sdk.type.bulk_send_validate_csv422_response import BulkSendValidateCsv422Response
from sign_well_python_sdk.type.bulk_send_template_ids_param_map import BulkSendTemplateIdsParamMap

from ...api_client import Dictionary
from sign_well_python_sdk.pydantic.bulk_send_template_ids_param_map import BulkSendTemplateIdsParamMap as BulkSendTemplateIdsParamMapPydantic
from sign_well_python_sdk.pydantic.bulk_send_validate_csv401_response import BulkSendValidateCsv401Response as BulkSendValidateCsv401ResponsePydantic
from sign_well_python_sdk.pydantic.bulk_send_validate_csv422_response import BulkSendValidateCsv422Response as BulkSendValidateCsv422ResponsePydantic
from sign_well_python_sdk.pydantic.bulk_send_validate_csv_response import BulkSendValidateCsvResponse as BulkSendValidateCsvResponsePydantic
from sign_well_python_sdk.pydantic.bulk_send_csv_request import BulkSendCsvRequest as BulkSendCsvRequestPydantic

# body param
SchemaForRequestBodyApplicationJson = BulkSendCsvRequestSchema


request_body_bulk_send_csv_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = BulkSendValidateCsvResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: BulkSendValidateCsvResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: BulkSendValidateCsvResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = BulkSendValidateCsv401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: BulkSendValidateCsv401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: BulkSendValidateCsv401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = BulkSendValidateCsv422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: BulkSendValidateCsv422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: BulkSendValidateCsv422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _validate_csv_mapped_args(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if template_ids is not None:
            _body["template_ids"] = template_ids
        if bulk_send_csv is not None:
            _body["bulk_send_csv"] = bulk_send_csv
        args.body = _body
        return args

    async def _avalidate_csv_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Validate Bulk Send CSV
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/bulk_sends/validate_csv',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_bulk_send_csv_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _validate_csv_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Validate Bulk Send CSV
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/bulk_sends/validate_csv',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_bulk_send_csv_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ValidateCsvRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def avalidate_csv(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._validate_csv_mapped_args(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
        )
        return await self._avalidate_csv_oapg(
            body=args.body,
            **kwargs,
        )
    
    def validate_csv(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._validate_csv_mapped_args(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
        )
        return self._validate_csv_oapg(
            body=args.body,
        )

class ValidateCsv(BaseApi):

    async def avalidate_csv(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
        validate: bool = False,
        **kwargs,
    ) -> BulkSendValidateCsvResponsePydantic:
        raw_response = await self.raw.avalidate_csv(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
            **kwargs,
        )
        if validate:
            return BulkSendValidateCsvResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(BulkSendValidateCsvResponsePydantic, raw_response.body)
    
    
    def validate_csv(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
        validate: bool = False,
    ) -> BulkSendValidateCsvResponsePydantic:
        raw_response = self.raw.validate_csv(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
        )
        if validate:
            return BulkSendValidateCsvResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(BulkSendValidateCsvResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._validate_csv_mapped_args(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
        )
        return await self._avalidate_csv_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        template_ids: BulkSendTemplateIdsParamMap,
        bulk_send_csv: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._validate_csv_mapped_args(
            template_ids=template_ids,
            bulk_send_csv=bulk_send_csv,
        )
        return self._validate_csv_oapg(
            body=args.body,
        )

