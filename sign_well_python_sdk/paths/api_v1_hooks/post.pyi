# coding: utf-8

"""
    Resources and endpoints

    When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sign_well_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sign_well_python_sdk.api_response import AsyncGeneratorResponse
from sign_well_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sign_well_python_sdk import schemas  # noqa: F401

from sign_well_python_sdk.model.webhooks_register_callback_url_request import WebhooksRegisterCallbackUrlRequest as WebhooksRegisterCallbackUrlRequestSchema
from sign_well_python_sdk.model.webhooks_register_callback_url400_response import WebhooksRegisterCallbackUrl400Response as WebhooksRegisterCallbackUrl400ResponseSchema
from sign_well_python_sdk.model.webhooks_register_callback_url_response import WebhooksRegisterCallbackUrlResponse as WebhooksRegisterCallbackUrlResponseSchema

from sign_well_python_sdk.type.webhooks_register_callback_url_request import WebhooksRegisterCallbackUrlRequest
from sign_well_python_sdk.type.webhooks_register_callback_url400_response import WebhooksRegisterCallbackUrl400Response
from sign_well_python_sdk.type.webhooks_register_callback_url_response import WebhooksRegisterCallbackUrlResponse

from ...api_client import Dictionary
from sign_well_python_sdk.pydantic.webhooks_register_callback_url400_response import WebhooksRegisterCallbackUrl400Response as WebhooksRegisterCallbackUrl400ResponsePydantic
from sign_well_python_sdk.pydantic.webhooks_register_callback_url_request import WebhooksRegisterCallbackUrlRequest as WebhooksRegisterCallbackUrlRequestPydantic
from sign_well_python_sdk.pydantic.webhooks_register_callback_url_response import WebhooksRegisterCallbackUrlResponse as WebhooksRegisterCallbackUrlResponsePydantic

# body param
SchemaForRequestBodyApplicationJson = WebhooksRegisterCallbackUrlRequestSchema


request_body_webhooks_register_callback_url_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor201ResponseBodyApplicationJson = WebhooksRegisterCallbackUrlResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: WebhooksRegisterCallbackUrlResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: WebhooksRegisterCallbackUrlResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = WebhooksRegisterCallbackUrl400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: WebhooksRegisterCallbackUrl400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: WebhooksRegisterCallbackUrl400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _register_callback_url_mapped_args(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if callback_url is not None:
            _body["callback_url"] = callback_url
        if api_application_id is not None:
            _body["api_application_id"] = api_application_id
        args.body = _body
        return args

    async def _aregister_callback_url_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Webhook
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/hooks',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_webhooks_register_callback_url_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _register_callback_url_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Webhook
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/hooks',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_webhooks_register_callback_url_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class RegisterCallbackUrlRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aregister_callback_url(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._register_callback_url_mapped_args(
            callback_url=callback_url,
            api_application_id=api_application_id,
        )
        return await self._aregister_callback_url_oapg(
            body=args.body,
            **kwargs,
        )
    
    def register_callback_url(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._register_callback_url_mapped_args(
            callback_url=callback_url,
            api_application_id=api_application_id,
        )
        return self._register_callback_url_oapg(
            body=args.body,
        )

class RegisterCallbackUrl(BaseApi):

    async def aregister_callback_url(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> WebhooksRegisterCallbackUrlResponsePydantic:
        raw_response = await self.raw.aregister_callback_url(
            callback_url=callback_url,
            api_application_id=api_application_id,
            **kwargs,
        )
        if validate:
            return WebhooksRegisterCallbackUrlResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(WebhooksRegisterCallbackUrlResponsePydantic, raw_response.body)
    
    
    def register_callback_url(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> WebhooksRegisterCallbackUrlResponsePydantic:
        raw_response = self.raw.register_callback_url(
            callback_url=callback_url,
            api_application_id=api_application_id,
        )
        if validate:
            return WebhooksRegisterCallbackUrlResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(WebhooksRegisterCallbackUrlResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._register_callback_url_mapped_args(
            callback_url=callback_url,
            api_application_id=api_application_id,
        )
        return await self._aregister_callback_url_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        callback_url: str,
        api_application_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._register_callback_url_mapped_args(
            callback_url=callback_url,
            api_application_id=api_application_id,
        )
        return self._register_callback_url_oapg(
            body=args.body,
        )

