# coding: utf-8

"""
    Resources and endpoints

    When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sign_well_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sign_well_python_sdk.api_response import AsyncGeneratorResponse
from sign_well_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sign_well_python_sdk import schemas  # noqa: F401

from sign_well_python_sdk.model.send_reminder_request import SendReminderRequest as SendReminderRequestSchema
from sign_well_python_sdk.model.document_send_reminder422_response import DocumentSendReminder422Response as DocumentSendReminder422ResponseSchema
from sign_well_python_sdk.model.document_send_reminder_response import DocumentSendReminderResponse as DocumentSendReminderResponseSchema
from sign_well_python_sdk.model.remind_recipients_map import RemindRecipientsMap as RemindRecipientsMapSchema
from sign_well_python_sdk.model.document_send_reminder404_response import DocumentSendReminder404Response as DocumentSendReminder404ResponseSchema

from sign_well_python_sdk.type.remind_recipients_map import RemindRecipientsMap
from sign_well_python_sdk.type.send_reminder_request import SendReminderRequest
from sign_well_python_sdk.type.document_send_reminder422_response import DocumentSendReminder422Response
from sign_well_python_sdk.type.document_send_reminder404_response import DocumentSendReminder404Response
from sign_well_python_sdk.type.document_send_reminder_response import DocumentSendReminderResponse

from ...api_client import Dictionary
from sign_well_python_sdk.pydantic.send_reminder_request import SendReminderRequest as SendReminderRequestPydantic
from sign_well_python_sdk.pydantic.document_send_reminder422_response import DocumentSendReminder422Response as DocumentSendReminder422ResponsePydantic
from sign_well_python_sdk.pydantic.document_send_reminder_response import DocumentSendReminderResponse as DocumentSendReminderResponsePydantic
from sign_well_python_sdk.pydantic.document_send_reminder404_response import DocumentSendReminder404Response as DocumentSendReminder404ResponsePydantic
from sign_well_python_sdk.pydantic.remind_recipients_map import RemindRecipientsMap as RemindRecipientsMapPydantic

# Path params
IdSchema = schemas.UUIDSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'id': typing.Union[IdSchema, str, uuid.UUID, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = SendReminderRequestSchema


request_body_send_reminder_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor201ResponseBodyApplicationJson = DocumentSendReminderResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: DocumentSendReminderResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: DocumentSendReminderResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = DocumentSendReminder404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: DocumentSendReminder404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: DocumentSendReminder404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = DocumentSendReminder422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: DocumentSendReminder422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: DocumentSendReminder422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _send_reminder_mapped_args(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if recipients is not None:
            _body["recipients"] = recipients
        args.body = _body
        if id is not None:
            _path_params["id"] = id
        args.path = _path_params
        return args

    async def _asend_reminder_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Send Reminder
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/documents/{id}/remind',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_send_reminder_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _send_reminder_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Send Reminder
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/documents/{id}/remind',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_send_reminder_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class SendReminderRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def asend_reminder(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._send_reminder_mapped_args(
            id=id,
            recipients=recipients,
        )
        return await self._asend_reminder_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def send_reminder(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._send_reminder_mapped_args(
            id=id,
            recipients=recipients,
        )
        return self._send_reminder_oapg(
            body=args.body,
            path_params=args.path,
        )

class SendReminder(BaseApi):

    async def asend_reminder(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
        validate: bool = False,
        **kwargs,
    ) -> DocumentSendReminderResponsePydantic:
        raw_response = await self.raw.asend_reminder(
            id=id,
            recipients=recipients,
            **kwargs,
        )
        if validate:
            return DocumentSendReminderResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(DocumentSendReminderResponsePydantic, raw_response.body)
    
    
    def send_reminder(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
        validate: bool = False,
    ) -> DocumentSendReminderResponsePydantic:
        raw_response = self.raw.send_reminder(
            id=id,
            recipients=recipients,
        )
        if validate:
            return DocumentSendReminderResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(DocumentSendReminderResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._send_reminder_mapped_args(
            id=id,
            recipients=recipients,
        )
        return await self._asend_reminder_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        id: str,
        recipients: typing.Optional[RemindRecipientsMap] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._send_reminder_mapped_args(
            id=id,
            recipients=recipients,
        )
        return self._send_reminder_oapg(
            body=args.body,
            path_params=args.path,
        )

